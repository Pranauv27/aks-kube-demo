name: 'Terraform'

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_USE_AZUREAD: true
  ARM_SKIP_PROVIDER_REGISTRATION: true

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init \
        -backend-config="resource_group_name=${{vars.AZURE_RESOURCE_GROUP_NAME}}" \
        -backend-config="storage_account_name=${{vars.AZURE_STORAGE_ACCOUNT_NAME}}" \
        -backend-config="container_name=${{vars.AZURE_CONTAINER_NAME}}" \
        -backend-config="key=${{vars.AZURE_KEY}}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -parallelism=1 -no-color -var="appId=${{ secrets.AZURE_CLIENT_ID }}" -var="password=${{ secrets.AZURE_CLIENT_SECRET }}"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -parallelism-1